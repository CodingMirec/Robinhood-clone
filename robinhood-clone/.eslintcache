[{"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\index.js":"1","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\App.js":"2","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\reportWebVitals.js":"3","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Header.js":"4","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Newsfeed.js":"5","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Stats.js":"6","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\LineGraph.js":"7","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\StatsRow.js":"8","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\firebase.js":"9","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\TimeLine.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":424,"mtime":1608643098716,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":791,"mtime":1608592841825,"results":"15","hashOfConfig":"12"},{"size":1795,"mtime":1608926371533,"results":"16","hashOfConfig":"12"},{"size":2884,"mtime":1608858866869,"results":"17","hashOfConfig":"12"},{"size":2177,"mtime":1608649558200,"results":"18","hashOfConfig":"12"},{"size":710,"mtime":1608851775043,"results":"19","hashOfConfig":"12"},{"size":500,"mtime":1608770526843,"results":"20","hashOfConfig":"12"},{"size":575,"mtime":1608911494844,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1m3gpnk",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\index.js",[],["47","48"],"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\App.js",[],"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\reportWebVitals.js",[],"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Header.js",["49","50","51","52","53","54"],"import React from \"react\";\r\nimport Logo from \"./robinhood__logo.svg\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header__wrapper\">\r\n      <div className=\"header__logo\">\r\n        <img src={Logo} width={25} />\r\n      </div>\r\n      <div className=\"header__search\">\r\n        <div className=\"header__searchContainer\">\r\n          <SearchIcon />\r\n          <input type=\"text\" placeholder=\"Search\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"header__menuItems\">\r\n        <a href=\"#\">Free Stocks</a>\r\n        <a href=\"#\">Portfolio</a>\r\n        <a href=\"#\">Cash</a>\r\n        <a href=\"#\">Messages</a>\r\n        <a href=\"#\">Account</a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Newsfeed.js",["55","56","57","58"],"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\Stats.js",["59","60","61"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { db } from \"./firebase\";\r\n\r\nimport \"./Stats.css\";\r\nimport StatsRow from \"./StatsRow\";\r\n\r\nconst TOKEN = \"bvh5hvv48v6p4qlb7330\";\r\nconst BASE_URL = \"https://finnhub.io/api/v1/quote\";\r\n\r\nfunction Stats() {\r\n  const [stockData, setStockData] = useState([]);\r\n  const [myStocks, setMyStocks] = useState([]);\r\n\r\n  const getMyStocks = () => {\r\n    db.collection(\"myStocks\").onSnapshot((snapshot) => {\r\n      let promises = [];\r\n      let tempData = [];\r\n      snapshot.docs.map((doc) => {\r\n        promises.push(\r\n          getStocksData(doc.data().ticker).then((res) => {\r\n            tempData.push({\r\n              id: doc.id,\r\n              data: doc.data(),\r\n              info: res.data,\r\n            });\r\n          })\r\n        );\r\n      });\r\n      Promise.all(promises).then(() => {\r\n        setMyStocks(tempData);\r\n      });\r\n    });\r\n  };\r\n\r\n  const getStocksData = (stock) => {\r\n    return axios\r\n      .get(`${BASE_URL}?symbol=${stock}&token=${TOKEN}`)\r\n      .catch((error) => {\r\n        console.error(\"Error\", error.message);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let tempStocksData = [];\r\n    const stocksList = [\r\n      \"AAPL\",\r\n      \"MSFT\",\r\n      \"TSLA\",\r\n      \"FB\",\r\n      \"BABA\",\r\n      \"UBER\",\r\n      \"DIS\",\r\n      \"SBUX\",\r\n    ];\r\n\r\n    let promises = [];\r\n    getMyStocks();\r\n    stocksList.map((stock) => {\r\n      promises.push(\r\n        getStocksData(stock).then((res) => {\r\n          console.log(res);\r\n          tempStocksData.push({\r\n            name: stock,\r\n            ...res.data,\r\n          });\r\n        })\r\n      );\r\n    });\r\n\r\n    Promise.all(promises).then(() => {\r\n      console.log(tempStocksData);\r\n      setStockData(tempStocksData);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"stats\">\r\n      <div className=\"stats__container\">\r\n        <div className=\"stats__header\">\r\n          <p>Stocks</p>\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {myStocks.map((stock) => (\r\n              <StatsRow\r\n                key={stock.data.ticker}\r\n                name={stock.data.ticker}\r\n                openPrice={stock.info.o}\r\n                shares={stock.data.share}\r\n                price={stock.info.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"stats__header stats__lists\">\r\n          <p>Lists</p>\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {stockData.map((stock) => (\r\n              <StatsRow\r\n                key={stock.name}\r\n                name={stock.name}\r\n                openPrice={stock.o}\r\n                price={stock.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\LineGraph.js",["62"],"import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport \"./LineGraph.css\";\r\n\r\nfunction LineGraph() {\r\n  const [graphData, setGraphData] = useState([]);\r\n  const data = [\r\n    {\r\n      x: 10,\r\n      y: 20,\r\n    },\r\n    {\r\n      x: 15,\r\n      y: 10,\r\n    },\r\n    {\r\n      x: 12,\r\n      y: 4,\r\n    },\r\n  ];\r\n\r\n  const createMockData = () => {\r\n    let data = [];\r\n    let value = 50;\r\n    for (var i = 0; i < 366; i++) {\r\n      let date = new Date();\r\n      date.setHours(0, 0, 0, 0);\r\n      date.setDate(i);\r\n      value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random() * 10);\r\n      data.push({ x: date, y: value });\r\n    }\r\n    setGraphData(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    createMockData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"linegraph\">\r\n      <Line\r\n        data={{\r\n          datasets: [\r\n            {\r\n              type: \"line\",\r\n              data: graphData,\r\n              backgroundColor: \"black\",\r\n              borderColor: \"#5AC53B\",\r\n              borderWidth: 2,\r\n              pointBorderColor: \"rgba(0, 0, 0, 0)\",\r\n              pointBackgroundColor: \"rgba(0, 0, 0, 0)\",\r\n              pointHoverBackgroundColor: \"#5AC53B\",\r\n              pointHoverBorderColor: \"#000000\",\r\n              pointHoverBorderWidth: 4,\r\n              pointHoverRadius: 6,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          legend: {\r\n            display: false,\r\n          },\r\n          tooltips: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                type: \"time\",\r\n                time: {\r\n                  format: \"MM/DD/YY\",\r\n                  tooltipFormat: \"ll\",\r\n                },\r\n                ticks: {\r\n                  display: false,\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  display: false,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\StatsRow.js",["63"],"import React from \"react\";\r\nimport StockSVG from \"./stock.svg\";\r\n\r\nimport \"./StatsRow.css\";\r\n\r\nfunction StatsRow(props) {\r\n  const percentage = ((props.price - props.openPrice) / props.openPrice) * 100;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"row__intro\">\r\n        <h1>{props.name}</h1>\r\n        <p>{props.shares && props.shares + \" shares\"}</p>\r\n      </div>\r\n      <div className=\"row__chart\">\r\n        <img src={StockSVG} height={16} />\r\n      </div>\r\n      <div className=\"row__numbers\">\r\n        <p className=\"row__price\">{props.price}</p>\r\n        <p className=\"row__percentage\">{Number(percentage).toFixed(2)}%</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatsRow;\r\n","C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\firebase.js",[],"C:\\Users\\Mirec\\Desktop\\CodingMirec\\Clones\\Robinhood-clone\\robinhood-clone\\src\\TimeLine.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":12,"column":9,"nodeType":"70","endLine":12,"endColumn":38},{"ruleId":"71","severity":1,"message":"72","line":21,"column":9,"nodeType":"70","endLine":21,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":22,"column":9,"nodeType":"70","endLine":22,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":23,"column":9,"nodeType":"70","endLine":23,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":24,"column":9,"nodeType":"70","endLine":24,"endColumn":21},{"ruleId":"71","severity":1,"message":"72","line":25,"column":9,"nodeType":"70","endLine":25,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"73","severity":1,"message":"77","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":12},{"ruleId":"73","severity":1,"message":"78","line":3,"column":10,"nodeType":"75","messageId":"76","endLine":3,"endColumn":16},{"ruleId":"73","severity":1,"message":"79","line":11,"column":9,"nodeType":"75","messageId":"76","endLine":11,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":19,"column":31,"nodeType":"82","messageId":"83","endLine":19,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":59,"column":28,"nodeType":"82","messageId":"83","endLine":59,"endColumn":30},{"ruleId":"84","severity":1,"message":"85","line":75,"column":6,"nodeType":"86","endLine":75,"endColumn":8,"suggestions":"87"},{"ruleId":"73","severity":1,"message":"88","line":8,"column":9,"nodeType":"75","messageId":"76","endLine":8,"endColumn":13},{"ruleId":"68","severity":1,"message":"69","line":16,"column":9,"nodeType":"70","endLine":16,"endColumn":43},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Chip' is defined but never used.","'Avatar' is defined but never used.","'popularTopics' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["91"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [getMyStocks]",{"range":"94","text":"95"},[1777,1779],"[getMyStocks]"]